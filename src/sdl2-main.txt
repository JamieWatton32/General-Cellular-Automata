use rand::Rng;
use sdl2::event::Event;
use sdl2::keyboard::Keycode;
use sdl2::mouse::MouseButton;
use sdl2::pixels::Color;
use sdl2::rect::{Point, Rect};
use sdl2::render::Canvas;
use sdl2::video::Window;
use sdl2::Sdl;
use std::time::{Duration, Instant};

mod tree;
use tree::{Point2D, QuadTree, Rectangle};

const WIDTH: u32 = 800;
const HEIGHT: u32 = 800;
const CAPACITY: usize = 4;
const POINT_COUNT: usize = 800;

fn draw_points(canvas: &mut Canvas<Window>, points: &[Point2D], color: Color) {
    canvas.set_draw_color(color);
    //Bad way of determining if it is a query point or a regular point..
    if color == Color::RGB(0, 255, 0) {
        for point in points {
            canvas
                .draw_rect(Rect::from_center(
                    Point::new(point.x as i32, point.y as i32),
                    5,
                    5,
                ))
                .unwrap();
        }
    } else {
        for point in points {
            canvas
                .draw_rect(Rect::from_center(
                    Point::new(point.x as i32, point.y as i32),
                    2,
                    2,
                ))
                .unwrap();
        }
    }
}

fn draw_rectangle(canvas: &mut Canvas<Window>, rect: &Rectangle, color: Color) {
    canvas.set_draw_color(color);
    let x_start = (rect.x - rect.width / 2) as i32;
    let y_start = (rect.y - rect.height / 2) as i32;
    let width = rect.width as u32;
    let height = rect.height as u32;
    canvas
        .draw_rect(Rect::new(x_start, y_start, width, height))
        .unwrap();
}

fn draw_tree(canvas: &mut Canvas<Window>, qt: &QuadTree) {
    // Draw the boundary of the current quadtree node
    draw_rectangle(canvas, &qt.boundary, Color::RGB(255, 255, 255));

    // Recursively draw the boundaries of the subdivided quadrants
    if qt.divided {
        if let Some(ne) = &qt.north_east {
            draw_tree(canvas, ne);
        }
        if let Some(nw) = &qt.north_west {
            draw_tree(canvas, nw);
        }
        if let Some(se) = &qt.south_east {
            draw_tree(canvas, se);
        }
        if let Some(sw) = &qt.south_west {
            draw_tree(canvas, sw);
        }
    }
}

fn main() {
    let sdl_context: Sdl = sdl2::init().unwrap();
    let video_subsystem = sdl_context.video().unwrap();
   
    let window = video_subsystem
        .window("QuadTree - ESC to exit", WIDTH, HEIGHT)
        .position_centered()
        .build()
        .unwrap();

    let mut canvas = window.into_canvas().build().unwrap();
    
    let boundary = Rectangle {
        x: (WIDTH / 2) as i32,
        y: (HEIGHT / 2) as i32,
        width: WIDTH as i32,
        height: HEIGHT as i32,
    };

    let mut qt = QuadTree::new(boundary, CAPACITY);

    let mut rng = rand::thread_rng();

    // for _ in 0..POINT_COUNT {
    //     let p = Point2D {
    //         x: rng.gen_range(0..WIDTH as i32),
    //         y: rng.gen_range(0..HEIGHT as i32),
    //     };
    //     qt.insert(p);
    // }

    let mut query_range = Rectangle {
        x: (WIDTH / 2) as i32,
        y: (HEIGHT / 2) as i32,
        width: 200,
        height: 200,
    };
        
    let mut left_ms_btn_down = false;
    let mut right_ms_btn_down = false;
  
    let mut last_frame_time = Instant::now();
    let mut last_fps_print_time = Instant::now();
    let mut frame_count = 0;

    let mut event_pump = sdl_context.event_pump().unwrap();
    'running: loop {
        for event in event_pump.poll_iter() {
            match event {
                Event::Quit { .. }
                | Event::KeyDown {
                    keycode: Some(Keycode::Escape),
                    ..
                } => break 'running,

                Event::MouseButtonDown { mouse_btn, .. } => {
                    if mouse_btn == MouseButton::Left {
                        left_ms_btn_down = true;
                    }
                    if mouse_btn == MouseButton::Right {
                        right_ms_btn_down = true
                    }
                }
                Event::MouseButtonUp { mouse_btn, .. } => {
                    if mouse_btn == MouseButton::Left {
                        left_ms_btn_down = false;
                    }
                    if mouse_btn == MouseButton::Right {
                        right_ms_btn_down = false
                    }
                }
                _ => {}
            }
        }

        canvas.set_draw_color(Color::RGB(0, 0, 0));
        canvas.clear();
        if left_ms_btn_down {
            query_range = Rectangle {
                x: event_pump.mouse_state().x(),
                y: event_pump.mouse_state().y(),
                width: 200,
                height: 200,
            };
        }
        if right_ms_btn_down {
            for _ in 0..5 {
                let (x, y) = (event_pump.mouse_state().x(), event_pump.mouse_state().y());
                let p = Point2D {
                    x: x + rng.gen_range(-100..100 as i32),
                    y: y + rng.gen_range(-100..100 as i32),
                };
                qt.insert(p);
            }
        }

        // Draw tree structure
        draw_tree(&mut canvas, &qt);
        // Draw all points in the quadtree
        let all_points = qt.points();

        draw_points(&mut canvas, &all_points, Color::RGB(255, 255, 255));

        // Draw the query range
        draw_rectangle(&mut canvas, &query_range, Color::RGB(255, 0, 0));

        // Perform query
        let query_points = qt.query(&query_range);

        // Draw query points
        draw_points(&mut canvas, &query_points, Color::RGB(0, 255, 0));

        // Calculate FPS
        frame_count += 1;
        let now = Instant::now();
        let elapsed_time = now.duration_since(last_fps_print_time);

        if elapsed_time.as_secs_f64() >= 1.0 {
            let fps = frame_count as f64 / elapsed_time.as_secs_f64();
            println!("FPS: {:.2}", fps);
            frame_count = 0;
            last_fps_print_time = now;
        }

       
        canvas.present();
    }
    ::std::thread::sleep(Duration::new(0, 1_000_000_000u32 / 60));
}
